a. Write a pseudocode algorithm for multiplication.

	r = p * q
	foreach term, t_p, in p:
		foreach term, t_q, in q:
			(multiply t_p by t_q
			if there is already a term in r that as the same degree as (t_q * t_p) 
				then add to the already existant term.
			else)
				insert (t_q * t_p) as a new term in r

b. Write a pseudocode algorithm for division. 

	q = u / v such that u = "q * v + r" where r = the remainder
	q = result
	r = dividend
	v = divisor
	x = temp
	set r = u by making a term-by-term copy of all terms in u to r //in order to not change u
	f_v = first term in v (assuming sorted, so highest exponent for this polynomial)
	f_r = first term in r
	while (f_v exponent is <= f_r exponent):
		d equals f_r divided by f_v (d = f_r / f_v) //d is a single poly
		d gets added to q //adding to our result
		foreach term, t_v, in v:
			subtract (t_v * d) from r
			
	at the end:
	q = result
	r = remainder
	such that: u = "q * v + r"
	
	
c. Illustrate your division algorithm running on this example: (x^3+x-1) / (x+1) = x^2-x+2
   Be sure to show the values of all variables in your pseudocode at the beginning of each loop iteration.
   q = 0
   v = (x+1)
   u = (x^3+x-1)
   r = copy of u = (x^3+x-1)
   d = none
   Beginning: fv = x, fr = x^3, v = (x+1), r = (x^3+x-1), q = 0
   [while fv exponent is <= fv exponent] TRUE, then:
       d = fr / fv; d = (x^2)
       d gets added to q; q = x^2
       foreach term, t_v, in v:
           Iteration 1: v = (x+1), r = (x^3+x-1), d = (x^2), q = (x^2), t_v = x
           [subtract (t_v * d) from r] now r = (x-1), d = (x^2), q = (x^2), t_v = x
           Iteration 2: v = (x+1), r = (x-1), d = (x^2), q = (x^2), t_v = 1
           [subtract (t_v * d) from r] now r = (-x^2+x-1), d = (x^2), q = (x^2)
   Iteration 2: fv = x, fr = -x^2, v = (x+1), r = (-x^2+x-1), q = (x^2)
   [while fv exponent is <= fv exponent] TRUE, then:
       d = fr / fv; d = (-x)
       d gets added to q; q = (x^2-x)
       foreach term, t_v in v:
           Iteration 1: v = (x+1), r = (-x^2+x-1), d = (-x), q = (x^2-x), t_v = x
           [subtract (t_v * d) from r] now r = (x-1), d = (-x), q = (x^2-x), t_v = x
           Iteration 2: v = (x+1), r = (x-1), d = (-x), q = (x^2-x), t_v = 1
           [subtract (t_v * d) from r] now r = (2x+1), d = (-x), q = (x^2-x)
   Iteration 2: fv = x, fr = 2x, r = (2x+1), q = (x^2-x)
   [while fv exponent is <= fv exponent] TRUE, then:
       d = fr / fv; d = (2)
       d gets added to q; q = (x^2-x+2)
       foreach term, t_v in v:
           Iteration 1: v = (x+1), r = (2x+1), d = (2), q = (x^2-x+2), t_v = x
           [subtract (t_v * d) from r] now r = (1), d = (2), q = (x^2-x+2), t_v = x
           Iteration 2: v = (x+1), r = (1), d = (2), q = (x^2-x+2), t_v = 1
           [subtract (t_v * d) from r] now r = (-3), d = (2), q = (x^2-x+2)  
   Iteration 3: fv = x, fr = -3, r = (-3), q = (x^2-x+2)
   [while fv exponent is <= fv exponent] FALSE
   Done: q = (x^2-x+2) which is our answer
   And: u = q * v + r, (x^3+x-1) = (x^2-x+1) * (x+1)  + -3 
           
   