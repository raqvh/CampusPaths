My representation:
	My graph representation is very similar to that of b. (adjacency list). In my graph class, I have
	a map whose keys are nodes and values are edges. Each node has a set of all edges that point to
	other nodes. So, while looking at each individual node, I can also see all possible options to
	go from there. 
	
	My graph is initially constructed as an empty graph, but nodes and edges can be added after. 
	My graph also has the functionality to remove nodes and edges which is handy for updating the
	graph if data changes.
	
	I chose this representation, because I believe it will be more efficient to find paths if I can
	simply look at one node and see all possible options of where I can reach the next node. This
	seemed more efficient to me than my original thought of having just a separate list of nodes
	and edges. With my map, I would not have to be constantly searching through different lists
	for the children node I needed. 
	
a. Collection of edges
	An advantage for this representation would be ease of getting all the edges. Compared to my
	representation, where I have to go through all the mappings to get a complete list of edges,
	the edges are immediately available. 

b. Adjacency list (Node is associated with a list of outgoing edges)
	An advantage for this representation is that it is quick to get all children nodes from the
	parent node, since they are already associated with the parent node. It would also take less 
	memory than an adjacency matrix.

c. Adjacency matrix (For every [A,B] pair what edges there are)
	An advantage for this representation is being able to quickly check if an edge is contained
	in the graph or not. It provides more of a constant time than an adjacency list would.