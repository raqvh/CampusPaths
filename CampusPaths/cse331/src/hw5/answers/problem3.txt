Documentation: In hw5/answers/problem3.txt, write a few paragraphs documentaiton and 
explaining your testing strategy.

Implementation testing: 
	I started my implementation testing by simply outlining a test class for each class
	I had created (Node, Edge, & Graph). Since I had already outlined my methods, I simply
	made a test method for each method I had created. Then I thought about what I wanted 
	each method to do. I constructed a test graph and a few general nodes and edges for
	using in all my methods. Finally, I implemented each test method so it would test that
	my classes do what I said they would. Then I also thought about how different methods
	and processes could affect my code and tested for these things as well.
	
Specification testing:
	I tried to keep my specification testing simple and test all the general methods a
	graph would have. I added in a few extra methods to the spec testing that I had
	included in my graph for added functionality. Then I focused my specification testing
	on testing that each method does what it says while just looking at my JavaDoc. This
	way I could ensure it was coming from more of a 'client' type view.
	
Append:
	After my initial implementation of my graph, I ended up deciding to add a few more
	common methods including isEmpty(), clear(), and size(). I thought these would be
	methods that could be useful in creating graphs and manipulating them. This also
	meant I had to go back and update my test code to test for these methods.